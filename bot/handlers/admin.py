from aiogram import Router, F
from aiogram.types import Message
import re
from bot.data.database import async_session
from bot.data.services.allowed_users_service import AllowedUserService
from bot.data.services.user_service import UserService
from bot.data.services.product_service import ProductService    
from config import settings

router = Router()


def parse_username(identifier: str) -> str:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç username –∏–∑ –ª—é–±—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤"""
    identifier = identifier.split()[0]
    match = re.search(r"(?:t\.me/|@)?([\w_]+)", identifier)
    return match.group(1).lower() if match else identifier.lstrip("@").lower()


def is_admin(user):
    admins = [admin.lower() for admin in settings.bot.ADMINS]
    return user.username.lower() in admins or user.id in admins


@router.message(F.text.startswith("/add"))
async def add_user(message: Message):
    if not is_admin(message.from_user):
        return

    try:
        # –†–∞–∑–¥–µ–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏ –∏ –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç –ø–æ—Å–ª–µ /add
        parts = message.text.split()
        if len(parts) < 2:
            raise ValueError("–ù–µ —É–∫–∞–∑–∞–Ω –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä")

        identifier = " ".join(parts[1:])  # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –ø–æ—Å–ª–µ /add
        identifier = identifier.strip()

        allowed_service = AllowedUserService(async_session)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ user_id
        if identifier.isdigit():
            user_id = int(identifier)
            if await allowed_service.is_allowed_by_id(user_id):
                await message.answer("‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø")
                return

            await allowed_service.add_user(user_id)
            await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å [ID: {user_id}] –¥–æ–±–∞–≤–ª–µ–Ω")

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ username/—Å—Å—ã–ª–∫–∏
        else:
            username = parse_username(identifier)

            if await allowed_service.is_allowed_by_username(username):
                await message.answer("‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø")
                return

            await allowed_service.add_user(username=username)
            await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –¥–æ–±–∞–≤–ª–µ–Ω")

    except Exception as e:
        print(e)
        await message.answer(
            "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä—ã:\n"
            "/add @username\n"
            "/add 123456\n"
            "/add https://t.me/username"
        )


@router.message(F.text.startswith("/remove"))
async def remove_user(message: Message):
    if not is_admin(message.from_user):
        return

    try:
        _, identifier = message.text.split(maxsplit=1)
        identifier = identifier.strip()

        allowed_service = AllowedUserService(async_session)
        user_service = UserService(async_session)
        product_service = ProductService(async_session)

        # –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ allowed_users
        if identifier.isdigit():
            user_id = int(identifier)
            user = await user_service.get_by_id(user_id)
            success = await allowed_service.remove_user_by_id(user_id)
        else:
            username = parse_username(identifier)
            user = await user_service.get_by_username(username)
            success = await allowed_service.remove_user_by_username(username)

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –±–∞–∑–µ
        if user:
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã (–ø—Ä–∏–º–µ—Ä –¥–ª—è Product)
            await product_service.delete_all_by_user_id(user.user_id)


        response = "‚úÖ –£–¥–∞–ª–µ–Ω–æ (–≤–∫–ª—é—á–∞—è —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)" if success else "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
        await message.answer(response)

    except Exception as e:
        print(e)
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
            "/remove @username\n/remove 123456\n/remove https://t.me/username"
        )


@router.message(F.text == "/list")
async def list_allowed_users(message: Message):
    if not is_admin(message.from_user):
        return

    allowed_service = AllowedUserService(async_session)
    users = await allowed_service.get_all()

    if not users:
        await message.answer("üì≠ –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç")
        return

    user_list = []
    for idx, user in enumerate(users, 1):
        line = f"{idx}. "
        if user.user_id:
            line += f"üÜî <code>{user.user_id}</code>"
        if user.username:
            line += (
                f" ‚îÇ üë§ @{user.username}"
                if user.user_id
                else f"üë§ @{user.username}"
            )
        user_list.append(line)

    response = (
        "üìã <b>–°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n\n"
        + "\n".join(user_list)
        + "\n\n<i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add –∏–ª–∏ /remove –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è</i>"
    )

    await message.answer(response)
