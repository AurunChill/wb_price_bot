from typing import List, Union
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from bot.data.models.product import Product
from bot.data.database import async_session
from bot.data.services.product_service import ProductService

router = Router()


@router.message(F.text == "/products")
async def show_products(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ —Å –∫–Ω–æ–ø–∫–æ–π –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
    products = await ProductService(async_session).get_by_user(message.chat.id)
    await _send_products_message(message, products)


@router.callback_query(F.data == "refresh_products")
async def refresh_products(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤"""
    products = await ProductService(async_session).get_by_user(callback.message.chat.id)
    await callback.message.edit_reply_markup(reply_markup=None)  # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∫–Ω–æ–ø–∫–∏
    await _send_products_message(callback.message, products, is_edit=True)
    await callback.answer("‚ôªÔ∏è –°–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω")


async def _send_products_message(
    message: Union[Message, CallbackQuery],
    products: List[Product],
    is_edit: bool = False,
):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è"""
    builder = InlineKeyboardBuilder()

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤
    for product in products:
        builder.button(text=f"üì¶ {product.name}", callback_data=f"product_{product.id}")

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    builder.button(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_products")

    builder.adjust(2, 1)  # 2 –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤, 1 –¥–ª—è –∫–Ω–æ–ø–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è

    text = (
        f"üì¶ –í–∞—à–∏ —Ç–æ–≤–∞—Ä—ã ({len(products)} —à—Ç.):"
        if products
        else "üò¢ –¢–æ–≤–∞—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
    )

    if is_edit:
        await message.edit_text(text, reply_markup=builder.as_markup())
    else:
        await message.answer(text, reply_markup=builder.as_markup())


@router.callback_query(F.data == "products")
async def show_products_callback(callback: CallbackQuery):
    await show_products(message=callback.message)
    await callback.answer()


@router.callback_query(F.data.startswith("product_"))
async def product_detail(callback: CallbackQuery):
    product_id = int(callback.data.split("_")[1])
    product = await ProductService(async_session).get_by_id(product_id)

    if not product:
        return await callback.answer("üò¢ –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–∏ÃÜ–¥–µ–Ω")

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã
    price_info = ""
    if product.prev_price and product.prev_price != product.current_price:
        difference = product.current_price - product.prev_price
        percent = abs(difference / product.prev_price * 100)
        trend = "üìà –í—ã—Ä–æ—Å–ª–∞" if difference > 0 else "üìâ –£–ø–∞–ª–∞"
        price_info = (
            f"{trend} —Å <s>{product.prev_price} —Ä—É–±.</s> "
            f"–¥–æ <b>{product.current_price} —Ä—É–±.</b>\n"
            f"<b>–†–∞–∑–Ω–∏—Ü–∞:</b> {abs(difference):.2f} —Ä—É–±. ({percent:.2f}%)\n"
            f"<b>–û–±–Ω–æ–≤–ª–µ–Ω–æ:</b> {product.prev_price_date}\n\n"
        )
    else:
        price_info = "üîÑ –¶–µ–Ω–∞ –Ω–µ –º–µ–Ω—è–ª–∞—Å—å\n\n"

    builder = InlineKeyboardBuilder()
    builder.button(text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{product.id}")
    builder.button(text="‚Ü©Ô∏è –ö —Ç–æ–≤–∞—Ä–∞–º", callback_data="products")
    builder.adjust(2)

    info_text = (
        f"üìä <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ:</b>\n"
        f"{price_info}"
        f"‚Ä¢ –ê—Ä—Ç–∏–∫—É–ª: {product.article}\n"
        f"‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: <a href='{product.link}'>{product.name}</a>\n"
        f"‚Ä¢ –û—Å—Ç–∞—Ç–æ–∫: {product.stock} —à—Ç.\n"
        f"‚Ä¢ –¶–µ–Ω–∞: {product.current_price} —Ä—É–±.\n"
        f"‚Ä¢ –ú–∏–Ω–∏–º—É–º: {product.min_price} ({product.min_price_date})\n"
        f"‚Ä¢ –ú–∞–∫—Å–∏–º—É–º: {product.max_price} ({product.max_price_date})"
    )

    await callback.message.answer_photo(
        photo=product.image_url, caption=info_text, reply_markup=builder.as_markup()
    )
    await callback.answer()


@router.callback_query(F.data.startswith("delete_"))
async def delete_product(callback: CallbackQuery):
    product_id = int(callback.data.split("_")[1])
    await ProductService(async_session).delete(product_id)
    await callback.message.delete()
    await callback.answer("üóë –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!")
    await refresh_products(callback)
