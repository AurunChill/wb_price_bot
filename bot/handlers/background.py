from datetime import datetime
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from bot.bot import bot
from bot.data.database import async_session
from bot.data.services.product_service import ProductService
from parser.wildberries import AsyncWildberriesParser


async def check_prices():
    products = await ProductService(async_session).get_all()
    
    async with AsyncWildberriesParser() as parser:
        for product in products:
            try:
                current_info = await parser.get_product_info(product.article)
                if not current_info:
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã
                if current_info["current_price"] != product.current_price:
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –≤ product_detail
                    difference = current_info["current_price"] - product.current_price
                    percent = abs(difference / product.current_price * 100)
                    trend = "üìà –í—ã—Ä–æ—Å–ª–∞" if difference > 0 else "üìâ –£–ø–∞–ª–∞"
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –º–∏–Ω/–º–∞–∫—Å —Ü–µ–Ω—ã
                    new_min_price = product.min_price
                    new_min_date = product.min_price_date
                    new_max_price = product.max_price
                    new_max_date = product.max_price_date
                    
                    if current_info["current_price"] < product.min_price:
                        new_min_price = current_info["current_price"]
                        new_min_date = datetime.now().strftime("%d-%m-%Y %H:%M")
                        
                    if current_info["current_price"] > product.max_price:
                        new_max_price = current_info["current_price"]
                        new_max_date = datetime.now().strftime("%d-%m-%Y %H:%M")

                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    caption = (
                        f"üí∞ <b>–ò–ó–ú–ï–ù–ï–ù–ò–ï –¶–ï–ù–´</b>\n\n"
                        f"{trend} —Å <s>{product.current_price} —Ä—É–±.</s> "
                        f"–¥–æ <b>{current_info['current_price']} —Ä—É–±.</b>\n"
                        f"–†–∞–∑–Ω–∏—Ü–∞: {abs(difference):.2f} —Ä—É–±. ({percent:.2f}%)\n\n"
                        f"üìä <b>–¢–µ–∫—É—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>\n"
                        f"‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: <a href='{product.link}'>{product.name}</a>\n"
                        f"‚Ä¢ –ê—Ä—Ç–∏–∫—É–ª: {product.article}\n"
                        f"‚Ä¢ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_info['current_price']} —Ä—É–±.\n"
                        f"‚Ä¢ –û—Å—Ç–∞—Ç–æ–∫: {current_info['stock']} —à—Ç.\n"
                        f"‚Ä¢ –ú–∏–Ω. —Ü–µ–Ω–∞: {new_min_price} ({new_min_date})\n"
                        f"‚Ä¢ –ú–∞–∫—Å. —Ü–µ–Ω–∞: {new_max_price} ({new_max_date})"
                    )

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É —Å —Ñ–æ—Ç–æ
                    await bot.send_photo(
                        chat_id=product.user_id,
                        photo=product.image_url,
                        caption=caption,
                        reply_markup=InlineKeyboardMarkup(
                            inline_keyboard=[
                                [InlineKeyboardButton(
                                    text="üìú –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤", 
                                    callback_data="products"
                                )]
                            ]
                        )
                    )

                    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ë–î
                    await ProductService(async_session).update(
                        product.id,
                        current_price=current_info["current_price"],
                        prev_price=product.current_price,
                        prev_price_date=datetime.now().strftime("%d-%m-%Y %H:%M"),
                        stock=current_info["stock"],
                        image_url=current_info["image_url"],
                        min_price=new_min_price,
                        min_price_date=new_min_date,
                        max_price=new_max_price,
                        max_price_date=new_max_date
                    )
                    
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ü–µ–Ω—ã –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {product.article}: {str(e)}")

                