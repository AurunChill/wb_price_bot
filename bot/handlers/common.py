import re
from aiogram import Router, F
from aiogram.types import Message
from aiogram.utils.keyboard import InlineKeyboardBuilder
from bot.data.database import async_session
from bot.data.models.product import Product
from bot.data.services.product_service import ProductService
from parser.wildberries import AsyncWildberriesParser

router = Router()


@router.message(F.text)
async def handle_products(message: Message):
    articles = list(set(re.findall(r"\d+", message.text)))
    user_id = message.chat.id
    product_service = ProductService(async_session)

    added_products = []
    existing_articles = []
    not_found_articles = []
    exceeded_articles = []
    user_products = await product_service.get_by_user(user_id)
    must_add = 5 - len(user_products)
    if must_add <= 0:
        await message.answer("‚ùå –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤ (5).")
        return

    wait_msg = await message.answer("‚åõ –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤...\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
    async with AsyncWildberriesParser() as parser:
        for article in articles:
            if must_add > 0:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ
                if await product_service.get_by_article_and_user(article, user_id):
                    existing_articles.append(article)
                    continue

                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                product_info = await parser.get_product_info(article)
                if not product_info:
                    not_found_articles.append(article)
                    continue

                # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç
                product = await product_service.create(Product(user_id=user_id, **product_info))
                added_products.append(product)
                must_add -= 1
            else:
                exceeded_articles.append(article)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    response_messages = []
    await wait_msg.delete()

    if added_products:
        builder = InlineKeyboardBuilder()
        for product in added_products:
            builder.button(
                text=f"üì¶ {product.name}", callback_data=f"product_{product.id}"
            )
        builder.adjust(2)
        response_messages.append(
            await message.answer(
                f"‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(added_products)} —à—Ç.",
                reply_markup=builder.as_markup(),
            )
        )

    if existing_articles:
        articles_list = ", ".join(existing_articles)
        response_messages.append(
            await message.answer(
                f"‚ÑπÔ∏è –≠—Ç–∏ —Ç–æ–≤–∞—Ä—ã —É–∂–µ –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã —Ä–∞–Ω–µ–µ:\n<code>{articles_list}</code>"
            )
        )

    if not_found_articles:
        articles_list = ", ".join(not_found_articles)
        response_messages.append(
            await message.answer(
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä—ã:\n<code>{articles_list}</code>"
            )
        )

    if exceeded_articles:
        articles_list = ", ".join(exceeded_articles)
        response_messages.append(
            await message.answer(
                f"‚ö†Ô∏è –≠—Ç–∏ —Ç–æ–≤–∞—Ä—ã –Ω–µ –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –∏–∑-–∑–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞:\n<code>{articles_list}</code>"
            )
        )

    if not added_products and not existing_articles and not not_found_articles and not exceeded_articles:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞")